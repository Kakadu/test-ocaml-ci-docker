name: Build PR

on:
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          #- macos-latest
        ocaml-compiler:
          #- 4.10.x
          #- ocaml-variants.4.11.2+flambda
          - ocaml-variants.4.12.1+options,ocaml-option-flambda
        opam-disable-sandboxing:
          - true
        dune-cache:
          - true

    runs-on: ${{ matrix.os }}
    container:
      image: kakadu18/ocaml:fp2022

    steps:

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}

      #- run: sudo apt-get update -y
      #  if: matrix.os != 'macos-latest'

      # checking out the code seems to be important because local switch is used
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0                # fix me later

      ########## Installing a linter
      # - uses: actions/checkout@v2
      #   with:
      #     repository: Kakadu/mylinter
      #     path: zanuda
      - run: opam pin add https://github.com/Kakadu/mylinter.git --no-action
      - name: Installing a linter
        run: opam install zanuda --yes

      ############# Detecting and compiling fp2021
      # Smart link about setting environment variables
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      - run: |
          ./detect_latest.sh >> $GITHUB_ENV
          echo "${{ env.latest }}"

      - name: Installing dependencies
        run: cd ${{ env.latest }} && opam install . --deps-only --with-test --with-doc
      - name: Installing linter
        run: opam install mylinter --yes --with-doc

      - name: Naive linting
        run: |
          cd ${{ env.latest }} && python3 ../lint_filesystem.py ${{ env.latest }}

      - name: Checking ocamlformat
        run: |
          cd ${{ env.latest }} && opam exec -- dune build @fmt --profile=release

      - name: Compiling ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune build --profile=release

      - name: Running tests in ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune runtest --profile=release

      - name: Build API documentation for ${{ env.latest }}...
        run: |
          opam install odoc --yes
          cd ${{ env.latest }} && opam exec -- dune build @doc --profile=release

      #- uses: reviewdog/action-setup@v1

      - run: echo "RDJSON_DIR_PATH=_build/default/_found_lints" >> $GITHUB_ENV
      - run: cd ${{ env.latest }} && mkdir -p ${{ env.RDJSON_DIR_PATH }}
      - run: echo "RDJSON_FILE_PATH=${{ env.RDJSON_DIR_PATH }}/lints.rdjsonl" >> $GITHUB_ENV

      - name: Running linter in ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- mylinter -dir . -add-prefix ${{ env.latest }}/ -ordjsonl ${{ env.RDJSON_FILE_PATH }}

      - run: cat ${{ env.latest }}/${{ env.RDJSON_FILE_PATH }}
      - run: echo ${{ env.latest }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/projectname.txt
      - run: echo ${{ github.event.pull_request.user.login }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/piarast.txt
      - run: echo ${{ github.event.number }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/PR_number.txt
        # TODO: maybe PR_number is not required
      - run: echo ${{ github.event.pull_request.head.sha }} > ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/CI_COMMIT.txt
          # we use commit previous from head because HEAD is merge commit by some reason

      - run: echo $(git rev-parse HEAD)
      - run: echo $(git rev-parse HEAD~1)
      - run: echo ${{ github.event.pull_request.head.sha }}
      - run: PAGER= git log

      # - name: Run reviewdog
      #   if: ${{ false }}
      #   env:
      #     REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_TOKEN1 }}
      #   run: >
      #     cat ${{ env.latest }}/${{ env.RDJSON_FILE_PATH }} |
      #     reviewdog -f=rdjsonl -filter-mode nofilter -reporter=github-pr-check

      - uses: actions/upload-artifact@v2
        with:
          name: other_stuff
          path: |
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}

      - uses: actions/upload-artifact@v2
        with:
          name: docs
          path: |
            ${{ env.latest }}/_build/default/_doc/_html
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/projectname.txt
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/PR_number.txt
            ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}/CI_COMMIT.txt

      - name: Installing a clone detector
        run: npm install -g jscpd

      - name: Looking for clones
        run: python3 -m trace --trace ./find_clones.py ${{ env.latest }}

      - run: echo ${{ github.event.number }} > PR_number.txt

      - run: cat jscpd_report.txt

      - uses: actions/upload-artifact@v2
        with:
          name: jscpd_report
          path: |
            jscpd_report.txt
            PR_number.txt

      #- name: Deploy found lints
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    deploy_key: ${{ env.ARTIFACTS_PK }}
      #    publish_dir: ${{ env.latest }}/${{ env.RDJSON_DIR_PATH }}
      #    external_repository: Kakadu/fp2021-ci-artifacts
      #    publish_branch: master
      #    keep_files: true
      #    destination_dir: 2021/${{ github.event.pull_request.user.login }}

      #- name: Deploy API documentation
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    deploy_key: ${{ env.ARTIFACTS_PK }}
      #    publish_dir: ${{ env.latest }}/_build/default/_doc/_html
      #    external_repository: Kakadu/fp2021-ci-artifacts
      #    publish_branch: master
      #    keep_files: true
      #    destination_dir: doc/${{ env.latest }}

      ##########################################################################
#      - id: get-comment-body
#        # run: |
#          body=$(cat comment-body.md)
#          body="${body//'%'/'%25'}"
#          body="${body//$'\n'/'%0A'}"
#          body="${body//$'\r'/'%0D'}"
#          echo ::set-output name=body::$body

#      - name: Find Comment
#        uses: peter-evans/find-comment@v1
#        id: fc
#        if: ${{ always() }}
#        with:
#          issue-number: ${{ github.event.number }}
#          body-includes: CI summary (пока заглушка)
#          comment-author: github-actions[bot]

#      - name: Create comment
#        uses: peter-evans/create-or-update-comment@v1
#        with:
#          comment-id: ${{ steps.fc.outputs.comment-id }}
#          edit-mode: replace
#          issue-number: ${{ github.event.number }}
#          body: ${{ steps.get-comment-body.outputs.body }}
