name: Build

on:
  push:
    branches:
      - 'master'
env:
  OPAMROOT: /home/user/.opam
jobs:
  build:
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        ocaml-compiler:
          - 4.14.x

    runs-on: ${{ matrix.os }}

    #container: node:17.6.0
    container:
      image: kakadu18/ocaml:fp2022
      #options: --user user
      #options: -v /__w/test-ocaml-ci-docker/test-ocaml-ci-docker:/home/user/:rw -w /home/user/

    steps:
      #- run: pwd
      #- run: id
      #- run: ls -la
      #- run: ls /__w/test-ocaml-ci-docker/test-ocaml-ci-docker -la
      #- run: ls -la ~
      #- run: ls -la /home/user
      #- run: touch /home/user/asdf
      #- run: ls /__w/test-ocaml-ci-docker/test-ocaml-ci-docker -la

      #- run: which opam
      #- run: opam exec -- which ocamlopt
      #- run: whoami
      #- run: opam exec -- which dune
      #- run: opam list

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        #  path: /__w/test-ocaml-ci-docker/test-ocaml-ci-docker

      - run: ls -la
      #- run: git log
      #- run: git diff --name-only HEAD~0 HEAD~1
      ############# Detecting and compiling fp2021
      # Smart link about setting environment variables
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      - run: |
          bash -x ./detect_latest.sh >> $GITHUB_ENV
          echo "${{ env.latest }}"

      - name: Installing dependencies
        run: cd ${{ env.latest }} && opam install . --deps-only --with-test --with-doc --yes

      - name: Checking ocamlformat
        run: |
          cd ${{ env.latest }} && opam exec -- dune build @fmt --profile=release

      - name: Compiling ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune build --profile=release

      - name: Running tests in ${{ env.latest }}...
        run: cd ${{ env.latest }} && opam exec -- dune runtest --profile=release

      - name: Build API documentation for ${{ env.latest }}...
        run: |
          opam install odoc --yes
          cd ${{ env.latest }} && opam exec -- dune build @doc --profile=release

      #- run: opam pin OCanren-ppx --dev-repo -n
      #- run: opam pin OCanren --dev-repo -n

      #- run: opam depext OCanren --yes
      #- run: opam install OCanren-ppx OCanren --yes

      #- run: opam pin add . --no-action

      #- name: Installing depexts
      #  run: opam depext noCanren --yes --with-test

      #- name: Installing dependencies
      #  run: opam install . --deps-only --with-test

      #- name: Building
      #  run: opam exec -- dune build --profile=release -p noCanren

      #- name: Installing dependencies for testing
      #  run: opam exec -- dune external-lib-deps -p noCanren-tests . --missing  | cut -f1 | xargs opam install --yes GT

      #- name: Testing
      #  run: opam exec -- dune runtest --profile=release -p noCanren #,noCanren-tests

      #- name: Installing a package
      #  run: |
      #    opam exec -- dune build @install --profile=release
      #    opam exec -- dune install --profile=release noCanren

      #- name: Listing files
      #  run: |
      #    opam show noCanren --list-files
